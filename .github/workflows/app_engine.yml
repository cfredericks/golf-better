name: App Engine

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USERNAME: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r gcp/app-engine/requirements.txt
        sudo apt-get update
        sudo apt-get install -y sqitch
    - name: Run unit tests
      run: |
        pip install pytest pytest-cov pytest-mock
        pytest gcp/app-engine/test/test_main.py --doctest-modules --junitxml=junit/gcp/app-engine/test-results.xml --cov=main --cov-report=xml --cov-report=html
    - name: Run integration tests
      env:
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: postgres
        DB_PORT: 5432
        DB_NAME: postgres
        INSTANCE_CONNECTION_NAME: ''
      run: |
        pytest gcp/app-engine/test/integration/test_integration.py --doctest-modules --junitxml=junit/gcp/app-engine/test-integration-results.xml --cov=main --cov-report=xml --cov-report=html
    - name: Lint with Ruff
      run: |
        pip install ruff
        ruff check --output-format=github gcp/app-engine
    - name: Upload pytest test results
      uses: actions/upload-artifact@v4
      with:
        name: pytest-results
        path: |
          junit/gcp/app-engine/test-results.xml
          junit/gcp/app-engine/test-integration-results.xml
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}